<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Golang 教程</title>
    <link>https://hopher.github.io/golang-tutorial/</link>
    <description>Recent content in Introduction on Golang 教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Apr 2019 12:21:35 +0800</lastBuildDate>
    
	<atom:link href="https://hopher.github.io/golang-tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Latest Cool</title>
      <link>https://hopher.github.io/golang-tutorial/docs/20190409213806/</link>
      <pubDate>Tue, 09 Apr 2019 21:38:06 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/20190409213806/</guid>
      <description>中文</description>
    </item>
    
    <item>
      <title>21-并发</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/22-%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Tue, 09 Apr 2019 21:34:44 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/22-%E5%B9%B6%E5%8F%91/</guid>
      <description>知识列表  goroutine channel close(ch1) 关闭通道  goroutine goroutine 是轻量级线程，goroutine 的调度是由 Golang 运行时进行管理的。
语法格式
go 函数名( 参数列表 ) go f(x, y, z)  channel 通道相关操作：初始化、发送、接收和关闭
 Don’t communicate by sharing memory; share memory by communicating.
（不要通过共享内存来通信，而应该通过通信来共享内存。）
 channel 相当于先进先出（FIFO）的队列
发送方： 元素值从通道进入外界时会被移动。这个移动操作实际上包含了两步， - 第一步是生成正在通道中的这个元素值的副本，并准备给到接收方， - 第二步是删除在通道中的这个元素值。
接收方： 接收操作通常包含了“复制通道内的元素值”“放置副本到接收方”“删掉原值”三个步骤。
分类
 单向通道 双向通道
var uselessChan = make(chan&amp;lt;- int, 1)   单向通道作用:
单向通道最主要的用途就是约束其他代码的行为。
注意 对于值为nil的通道，不论它的具体类型是什么，对它的发送操作和接收操作都会永久地处于阻塞状态。它们所属的 goroutine 中的任何代码，都不再会被执行。
注意，由于通道类型是引用类型，所以它的零值就是nil。换句话说，当我们只声明该类型的变量但没有用make函数对它进行初始时，该变量的值就会是nil。我们一定不要忘记初始化通道！
示例3
var ch3 chan int //ch3 &amp;lt;- 1 // 通道的值为nil，因此这里会造成永久的阻塞！ //&amp;lt;-ch3 // 通道的值为nil，因此这里会造成永久的阻塞！ _ = ch3  总结</description>
    </item>
    
    <item>
      <title>20-错误处理</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/20-%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Tue, 09 Apr 2019 21:34:33 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/20-%E6%8E%A5%E5%8F%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>20-错误处理</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/21-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 09 Apr 2019 21:34:33 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/21-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description> 两个内置函数 用于处理 Go 运行时的错误
 panic 用于主动抛出错误 recover 用来捕获 panic 抛出的错误  </description>
    </item>
    
    <item>
      <title>19-类型转换</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/19-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Tue, 09 Apr 2019 21:34:25 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/19-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>格式:
type_name(expression)  type_name 为类型，expression 为表达式。</description>
    </item>
    
    <item>
      <title>18-递归函数</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/18-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 09 Apr 2019 21:34:16 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/18-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>17-Map</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/17-Map/</link>
      <pubDate>Tue, 09 Apr 2019 21:34:08 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/17-Map/</guid>
      <description>用hash表实现, 无序，无法决定它的返回顺序
相关函数
 delete()  </description>
    </item>
    
    <item>
      <title>16-范围(Range)</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/16-%E8%8C%83%E5%9B%B4Range/</link>
      <pubDate>Tue, 09 Apr 2019 21:33:57 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/16-%E8%8C%83%E5%9B%B4Range/</guid>
      <description></description>
    </item>
    
    <item>
      <title>15-切片</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/15-%E5%88%87%E7%89%87/</link>
      <pubDate>Tue, 09 Apr 2019 21:33:49 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/15-%E5%88%87%E7%89%87/</guid>
      <description>切片 切片扩容时，会重新建立新的底层数组，内存重新分配内存储存空间, 然后把旧的数据复制到新的数组里, 时间复杂度O(n) 切片长度 &amp;gt;= 1024时, 以1.25倍进行扩容, 小于1024时则2倍扩容
golang 官方文档在关于 slice 的 append 一节有说明： &amp;gt; If the capacity of s is not large enough to fit the additional values, append allocates a new, sufficiently large underlying array that fits both the existing slice elements and the additional values. Otherwise, append re-uses the underlying array.
也就是说，如果原来的底层数组足够大，能放的下 append 的数据，就不会新建底层数组。而如果不够的话，则会分配一个新的数组。也因此是 O(n) 的时间复杂度
切片 vs 数组 声明时，数组指定长度大小, 切片没有
var balance = [5]float32{1000.0, 2.</description>
    </item>
    
    <item>
      <title>14-结构体</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/14-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Tue, 09 Apr 2019 21:33:40 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/14-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description> 结构体 格式:
type Book struct { title string author string }  </description>
    </item>
    
    <item>
      <title>13-指针</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/13-%E6%8C%87%E9%92%88/</link>
      <pubDate>Tue, 09 Apr 2019 21:33:29 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/13-%E6%8C%87%E9%92%88/</guid>
      <description>指针 指针，返回的是内存地址空间 (十六进制)
格式：0xc000070010, 开头的“0”令解析器更易辨认数，而“x”则代表十六进制
 二进制 数据在计算机中的表示，最终是以二进制的形式存在 - 优点：更直观地解决 - 缺点：太长，不容易思考，可以用更短的16进制表示
 指针一般用 ptr 表示
package main import &amp;quot;fmt&amp;quot; func main() { var a int = 10 fmt.Printf(&amp;quot;变量的地址: %v\n&amp;quot;, &amp;amp;a ) fmt.Printf(&amp;quot;变量的地址: %#x\n&amp;quot;, &amp;amp;a ) }  值方法 vs 指针方法区别
golang隐式传递指针，但是不隐式定义指针
func printBook( book *Books ) { fmt.Printf( &amp;quot;Book title : %s\n&amp;quot;, book.title); fmt.Printf( &amp;quot;Book author : %s\n&amp;quot;, book.author); fmt.Printf( &amp;quot;Book subject : %s\n&amp;quot;, book.subject); fmt.Printf( &amp;quot;Book book_id : %d\n&amp;quot;, book.</description>
    </item>
    
    <item>
      <title>12-数组</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/12-%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 09 Apr 2019 21:33:20 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/12-%E6%95%B0%E7%BB%84/</guid>
      <description>数组 数组声明
var balance [10] float32  初始化数组
 [&amp;hellip;] 为不定长
 var balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} var balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0}  访问数组元素
var salary float32 = balance[9]  示例：
package main import &amp;quot;fmt&amp;quot; func main() { var n [10]int /* n 是一个长度为 10 的数组 */ var i,j int /* 为数组 n 初始化元素 */ for i = 0; i &amp;lt; 10; i++ { n[i] = i + 100 /* 设置元素为 i + 100 */ } /* 输出每个数组元素的值 */ for j = 0; j &amp;lt; 10; j++ { fmt.</description>
    </item>
    
    <item>
      <title>11-变量作用域</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/11-%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Tue, 09 Apr 2019 21:33:11 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/11-%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>3种变量作用域  局部变量
作用域只在函数体内 全局变量
全局变量可以在整个包 &amp;amp;&amp;amp; 外部包（被导出后）使用 &amp;gt; 外部包引用，变量要大写
import &amp;quot;outside&amp;quot; fmt.Printf(&amp;quot;%s&amp;quot;, outside.Name)  形式参数 形式参数会作为函数的局部变量来使用。
示例
package main import &amp;quot;fmt&amp;quot; /* 声明全局变量 */ var a int = 20; func main() { /* main 函数中声明局部变量 */ var a int = 10 var b int = 20 var c int = 0 fmt.Printf(&amp;quot;main()函数中 a = %d\n&amp;quot;, a); c = sum( a, b); fmt.Printf(&amp;quot;main()函数中 c = %d\n&amp;quot;, c); } /* 函数定义-两数相加 */ func sum(a, b int) int { fmt.</description>
    </item>
    
    <item>
      <title>10-函数</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/10-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 09 Apr 2019 21:33:05 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/10-%E5%87%BD%E6%95%B0/</guid>
      <description> 闭包 package main import &amp;quot;fmt&amp;quot; func getSequence() func() int { i:=0 return func() int { i+=1 return i } } func main(){ /* nextNumber 为一个函数，函数 i 为 0 */ nextNumber := getSequence() /* 调用 nextNumber 函数，i 变量自增 1 并返回 */ fmt.Println(nextNumber()) fmt.Println(nextNumber()) fmt.Println(nextNumber()) /* 创建新的函数 nextNumber1，并查看结果 */ nextNumber1 := getSequence() fmt.Println(nextNumber1()) fmt.Println(nextNumber1()) }  正规函数 /* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 声明局部变量 */ var result int if (num1 &amp;gt; num2) { result = num1 } else { result = num2 } return result }  </description>
    </item>
    
    <item>
      <title>09-循环语句</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/09-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Tue, 09 Apr 2019 21:32:58 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/09-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>08-条件语句</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/08-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Tue, 09 Apr 2019 21:32:49 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/08-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>07-运算符</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/07-%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Tue, 09 Apr 2019 21:32:41 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/07-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description> 运算符  算术运算符 关系运算符 逻辑运算符 位运算符 赋值运算符 其他运算符  </description>
    </item>
    
    <item>
      <title>06-常量</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/06-%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Tue, 09 Apr 2019 21:32:34 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/06-%E5%B8%B8%E9%87%8F/</guid>
      <description> 常量 格式：
const identifier [type] = value  [type] 可以省略，使用直行推断
示例:
const b string = &amp;quot;abc&amp;quot; const b = &amp;quot;abc&amp;quot;  多个相同类型的声明, 简写
const c_name1, c_name2 = value1, value2  </description>
    </item>
    
    <item>
      <title>05-变量</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/05-%E5%8F%98%E9%87%8F/</link>
      <pubDate>Tue, 09 Apr 2019 21:32:25 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/05-%E5%8F%98%E9%87%8F/</guid>
      <description> 3种变量声明方式  无初始化, 指定变量类型 var 类型推断 短变量声明 :=  </description>
    </item>
    
    <item>
      <title>04-数据类型</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 09 Apr 2019 21:32:15 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>table th:first-of-type { width: 60px; } 
数据类型    序号 类型和描述     1 布尔型 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。   2 数字类型 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。   3 字符串类型: 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。   4 派生类型:
(a) 指针类型（Pointer）
(b) 数组类型
(c) 结构化类型(struct)
(d) Channel 类型
(e) 函数类型
(f) 切片类型
(g) 接口类型（interface)
(h) Map 类型    数字类型 Go 也有基于架构的类型，例如：int、uint 和 uintptr。</description>
    </item>
    
    <item>
      <title>03-基础语法</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/03-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 09 Apr 2019 21:32:05 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/03-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description> 基础语法  25 个关键字或保留字 36 个预定义标识符  </description>
    </item>
    
    <item>
      <title>02-语言结构</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/02-%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 09 Apr 2019 21:31:57 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/02-%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/</guid>
      <description></description>
    </item>
    
    <item>
      <title>01-安装</title>
      <link>https://hopher.github.io/golang-tutorial/docs/base/01-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 09 Apr 2019 21:31:47 +0800</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/base/01-%E5%AE%89%E8%A3%85/</guid>
      <description> 安装 docker-compose 安装 </description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://hopher.github.io/golang-tutorial/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://hopher.github.io/golang-tutorial/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://hopher.github.io/golang-tutorial/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://hopher.github.io/golang-tutorial/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/A1/A01-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/A1/A01-xx/</guid>
      <description>Go语言fmt包Printf方法详解 General  %v 以默认的方式打印变量的值 %T 打印变量的类型  Integer  %+d 带符号的整型，fmt.Printf(&amp;quot;%+d&amp;quot;, 255)输出+255 %q 打印单引号 %o 不带零的八进制 %#o 带零的八进制 %x 小写的十六进制 %X 大写的十六进制 %#x 带0x的十六进制 %U 打印Unicode字符 %#U 打印带字符的Unicode %b 打印整型的二进制  Integer width  %5d 表示该整型最大长度是5，下面这段代码
fmt.Printf(&amp;quot;|%5d|&amp;quot;, 1) fmt.Printf(&amp;quot;|%5d|&amp;quot;, 1234567)  输出结果如下：
| 1| |1234567|  %-5d则相反，打印结果会自动左对齐
 %05d会在数字前面补零。
  Float  %f (=%.6f) 6位小数点 %e (=%.6e) 6位小数点（科学计数法） %g 用最少的数字来表示 %.3g 最多3位数字来表示 %.3f 最多3位小数来表示  String  %s 正常输出字符串 %q 字符串带双引号，字符串中的引号带转义符 %#q 字符串带反引号，如果字符串内有反引号，就用双引号代替 %x 将字符串转换为小写的16进制格式 %X 将字符串转换为大写的16进制格式 % x 带空格的16进制格式  String Width (以5做例子）  %5s 最小宽度为5 %-5s 最小宽度为5（左对齐） %.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/A1/A02-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/A1/A02-xx/</guid>
      <description> 书 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/20190409205253/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/20190409205253/</guid>
      <description>Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.
 Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae.</description>
    </item>
    
  </channel>
</rss>