<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Golang Tutorial</title>
    <link>https://hopher.github.io/golang-tutorial/</link>
    <description>Recent content in Introduction on Golang Tutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Apr 2019 12:21:35 +0800</lastBuildDate>
    
	<atom:link href="https://hopher.github.io/golang-tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://hopher.github.io/golang-tutorial/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://hopher.github.io/golang-tutorial/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://hopher.github.io/golang-tutorial/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://hopher.github.io/golang-tutorial/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/00-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/00-%E7%AE%80%E4%BB%8B/</guid>
      <description>简介 Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/01-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/01-%E5%AE%89%E8%A3%85/</guid>
      <description> 安装 docker-compose 安装 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/02-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/02-hello-world/</guid>
      <description> Hello World 实例 package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;Hello world&amp;quot;) }  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/03-%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/03-%E5%8F%98%E9%87%8F/</guid>
      <description>3种变量声明方式  无初始化, 指定变量类型 var 类型推断 短变量声明 :=  示例
package main import &amp;quot;fmt&amp;quot; func main() { // 1. 无初始化, 指定变量类型 var name string var age int fmt.Printf(&amp;quot;%q %d\n&amp;quot;, name, age) // 输出结果 // &amp;quot;&amp;quot; 0 // 2. var 类型推断 var name2 = &amp;quot;gopher2&amp;quot; fmt.Printf(&amp;quot;%s\n&amp;quot;, name2) // 输出结果 // gopher2 // 3. 短变量声明 := name3 := &amp;quot;gopher3&amp;quot; fmt.Printf(&amp;quot;%s\n&amp;quot;, name3) // 输出结果 // gopher3 }  3种变量作用域  局部变量
作用域只在函数体内 全局变量</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>table th:first-of-type { width: 60px; } 
数据类型    序号 类型和描述     1 布尔型 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。   2 数字类型 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。   3 字符串类型: 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。   4 派生类型:
(a) 指针类型（Pointer）
(b) 数组类型
(c) 结构化类型(struct)
(d) Channel 类型
(e) 函数类型
(f) 切片类型
(g) 接口类型（interface)
(h) Map 类型    数字类型 Go 也有基于架构的类型，例如：int、uint 和 uintptr。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/05-%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/05-%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/</guid>
      <description>正则用法：
/* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 声明局部变量 */ var result int if (num1 &amp;gt; num2) { result = num1 } else { result = num2 } return result }  闭包：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/06-%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/06-%E6%95%B0%E7%BB%84/</guid>
      <description>数组 数组声明
var balance [10] float32  初始化数组
 [&amp;hellip;] 为不定长
 var balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} var balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0}  访问数组元素
var salary float32 = balance[9]  示例：
package main import &amp;quot;fmt&amp;quot; func main() { var n [10]int /* n 是一个长度为 10 的数组 */ var i,j int /* 为数组 n 初始化元素 */ for i = 0; i &amp;lt; 10; i++ { n[i] = i + 100 /* 设置元素为 i + 100 */ } /* 输出每个数组元素的值 */ for j = 0; j &amp;lt; 10; j++ { fmt.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/07-%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/07-%E6%8C%87%E9%92%88/</guid>
      <description> 指针 指针，返回的是内存地址空间 (十六进制)
格式：0xc000070010, 开头的“0”令解析器更易辨认数，而“x”则代表十六进制
 二进制 数据在计算机中的表示，最终是以二进制的形式存在 - 优点：更直观地解决 - 缺点：太长，不容易思考，可以用更短的16进制表示
 指针一般用 ptr 表示
package main import &amp;quot;fmt&amp;quot; func main() { var a int = 10 fmt.Printf(&amp;quot;变量的地址: %v\n&amp;quot;, &amp;amp;a ) fmt.Printf(&amp;quot;变量的地址: %#x\n&amp;quot;, &amp;amp;a ) }  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/08-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/08-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/09-%E5%88%87%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/09-%E5%88%87%E7%89%87/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/10-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/10-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/11-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/11-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/12-%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/12-%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/13-goroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/13-goroutine/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/14-channel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/14-channel/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/15-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/15-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/16-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/16-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/17-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/17-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/18-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/18-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/19-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/19-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/20-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/20-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/21-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/21-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/22-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/22-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/23-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/23-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/24-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/24-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/25-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/25-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/26-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/26-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/27-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/27-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/28-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/28-xx/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/A1/A01-xx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/A1/A01-xx/</guid>
      <description>Go语言fmt包Printf方法详解 General  %v 以默认的方式打印变量的值 %T 打印变量的类型  Integer  %+d 带符号的整型，fmt.Printf(&amp;quot;%+d&amp;quot;, 255)输出+255 %q 打印单引号 %o 不带零的八进制 %#o 带零的八进制 %x 小写的十六进制 %X 大写的十六进制 %#x 带0x的十六进制 %U 打印Unicode字符 %#U 打印带字符的Unicode %b 打印整型的二进制  Integer width  %5d 表示该整型最大长度是5，下面这段代码
fmt.Printf(&amp;quot;|%5d|&amp;quot;, 1) fmt.Printf(&amp;quot;|%5d|&amp;quot;, 1234567)  输出结果如下：
| 1| |1234567|  %-5d则相反，打印结果会自动左对齐
 %05d会在数字前面补零。
  Float  %f (=%.6f) 6位小数点 %e (=%.6e) 6位小数点（科学计数法） %g 用最少的数字来表示 %.3g 最多3位数字来表示 %.3f 最多3位小数来表示  String  %s 正常输出字符串 %q 字符串带双引号，字符串中的引号带转义符 %#q 字符串带反引号，如果字符串内有反引号，就用双引号代替 %x 将字符串转换为小写的16进制格式 %X 将字符串转换为大写的16进制格式 % x 带空格的16进制格式  String Width (以5做例子）  %5s 最小宽度为5 %-5s 最小宽度为5（左对齐） %.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hopher.github.io/golang-tutorial/docs/with-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hopher.github.io/golang-tutorial/docs/with-toc/</guid>
      <description>Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.
 Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae.</description>
    </item>
    
  </channel>
</rss>